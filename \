#include <sys/time.h>
#include <pthread.h>
#include <unistd.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <err.h>

typedef pthread_mutex_t t_mtx;

typedef struct s_philosopher
{
	pthread_t thread;
	int id;
	int	sleep;
	int	eating;
	int thinking;
	int dead;
	int fork;
}				t_philosopher;

typedef struct s_fork
{
	t_mtx 	fork;
	int 	id;
} 		t_fork;

typedef struct s_data
{
	int number_of_philosophers;
	int time_to_die;
	int time_to_eat;
	int time_to_sleep;
	int number_of_times_each_philosopher_must_eat;
	t_philosopher *philos;
	int end_simulation;
	t_fork *forks;
}				t_data;

typedef enum e_mutex_code
{
	LOCK,
	UNLOCK,
	INIT,
	DESTROY,
	CREATE,
	JOIN,
	DETACH
}			t_mutex_code;

int		clean_error(char *message);
int		ft_strlen(char *str);
void    ft_putstr_fd(char *s, int fd);
int		ft_atoi(char *str);
void 	init_philo(t_data *data);
void 	*safe_malloc(size_t size);
void 	safe_thread_handle(pthread_t *thread, void *(*foo)(void *),
                        void *data, t_mutex_code code);
void 	mutex_handle(t_mtx *mutex, t_mutex_code code);
